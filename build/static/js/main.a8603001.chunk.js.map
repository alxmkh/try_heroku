{"version":3,"sources":["components/Note.jsx","components/Notification.jsx","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAeeA,G,MAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,SCIjCK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAU,QAAf,SACKI,K,gBCRPC,EAAU,aAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC8E9BK,EAxFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,IAEKlB,MAAK,SAAAmB,GACFT,EAASS,QAElB,IAEH,IAyCMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAAjC,GAAI,OAAIA,EAAKG,aAEhC,OACI,gCACI,uCACA,cAAC,EAAD,CAAcK,QAASmB,IACvB,8BACI,yBAAQrB,QAAS,kBAAMoB,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACKO,EAAYE,KAAI,SAAClC,EAAMmC,GAAP,OACb,cAAC,EAAD,CAEInC,KAAMA,EACNC,iBAAkB,kBA1CX,SAACgB,GAExB,IAAMjB,EAAOqB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,KAChCqB,EAAW,2BAAQtC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD2B,EACYb,EAAIqB,GACX1B,MAAK,SAAA2B,GACFjB,EAASD,EAAMa,KAAI,SAAAlC,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAOuC,SAEtDC,OAAM,SAAAC,GACHb,EAAgB,SAAD,OACF5B,EAAKK,QADH,sCAGfqC,YAAW,WACPd,EAAgB,QACjB,QA0B6Be,CAAmB3C,EAAKiB,MAF3CkB,QAMjB,uBAAMS,SA/DE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf1C,QAASkB,EACTyB,MAAM,IAAIC,MAAOC,cACjB/C,UAAWgD,KAAKC,SAAW,GAC3BnC,GAAII,EAAMgC,OAAS,GAGvBvB,EACYiB,GACPnC,MAAK,SAAA2B,GACFjB,EAASD,EAAMiC,OAAOf,IACtBf,EAAW,QAkDf,UACI,uBACI+B,MAAOhC,EACPiC,SA7BS,SAACX,GACtBrB,EAAWqB,EAAMY,OAAOF,UA8BhB,wBAAQG,KAAK,SAAb,yBCnFhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a8603001.chunk.js","sourcesContent":["import React from 'react'\nimport '../index.css'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n            id: notes.length + 1,\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n\n    const toggleImportanceOf = (id) => {\n        //const url = `http://localhost:3001/notes/${id}`\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all' }\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) =>\n                    <Note\n                        key={i}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}